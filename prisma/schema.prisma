generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SlackInstallation {
  id           String   @id @default(cuid())
  teamId       String
  enterpriseId String   @default("")
  installData  String
  botToken     String?
  botId        String?
  botUserId    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([teamId, enterpriseId])
  @@map("slack_installations")
}

model User {
  id            String         @id @default(cuid())
  slackUserId   String         @unique
  timezone      String         @default("UTC")
  language      String         @default("ja")
  preferences   String         @default("{}")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  focusSessions FocusSession[]
  inboxItems    InboxItem[]
  oauthTokens   OAuthToken[]
  tasks         Task[]

  @@map("users")
}

model Task {
  id            String    @id @default(cuid())
  title         String
  description   String?
  status        String    @default("PENDING")
  priority      String    @default("P2")
  priorityScore Float     @default(0)
  level         String    @default("SUB_TASK")
  parentId       String?
  folderUrls     String    @default("[]")
  slackPermalink String?   @db.VarChar(1024)
  dueDate        DateTime?
  reminderSent   Boolean   @default(false)
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  parent        Task?     @relation("TaskHierarchy", fields: [parentId], references: [id])
  children      Task[]    @relation("TaskHierarchy")
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model InboxItem {
  id             String   @id @default(cuid())
  slackTs        String   @unique
  channelId      String
  messageText    String
  status         String   @default("PENDING")
  authorId       String?
  threadTs       String?
  permalink      String?
  channelName    String?
  expiresAt      DateTime
  collectionType String   @default("MENTION")
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // New fields for mention-centric workflow
  hasReplied     Boolean  @default(false)
  replyCount     Int      @default(0)
  lastReplyTs    String?
  isTaskCreated  Boolean  @default(false)
  taskId         String?
  importance     String   @default("medium") // high/medium/low
  
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, hasReplied]) // For unread filter
  @@map("inbox_items")
}

model CalendarEvent {
  id             String   @id @default(cuid())
  googleId       String?  @unique
  title          String
  startTime      DateTime
  endTime        DateTime
  status         String   @default("TENTATIVE")
  sequenceNumber Int?
  totalInGroup   Int?
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("calendar_events")
}

model OAuthToken {
  id           String    @id @default(cuid())
  provider     String
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  scope        String    @default("")
  tokenType    String    @default("Bearer")
  lastRefresh  DateTime?
  isValid      Boolean   @default(true)
  userId       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@map("oauth_tokens")
}

model JobQueue {
  id          String   @id @default(cuid())
  jobType     String
  payload     String
  scheduledAt DateTime
  status      String   @default("PENDING")
  attempts    Int      @default(0)
  maxAttempts Int      @default(3)
  userId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("job_queue")
}

model FocusSession {
  id        String    @id @default(cuid())
  startTime DateTime
  endTime   DateTime?
  duration  Int
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("focus_sessions")
}
